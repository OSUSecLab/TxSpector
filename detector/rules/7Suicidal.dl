// BSD 3-Clause License
//
// Copyright (c) 2020, The Ohio State Univerisity. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice, this
//   list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of the copyright holder nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Note: Suicidal contract

#include "types.dl"
#include "opcode.dl"

.decl depends(x:Variable, y:Variable)
depends(x, x) :-
  use(x, _, _, _, _, _).

depends(x, x) :-
  def(x, _, _, _, _).

depends(x, y) :-
  def(x, stmt, _, x_cd, x_cn),
  use(y, stmt, _, _, x_cd, x_cn).

depends(x, z) :-
  depends(x, y),
  depends(y, z).


//Call depth is restricted to 1.
.decl Step1(self_loc:number, caller_loc:number, jumpi_loc:number)
.output Step1
Step1(self_loc, caller_loc, jumpi_loc) :-
  op_SELFDESTRUCT(_, _, self_loc, 1, _),
  op_CALLER(_, caller_addr, caller_loc, 1, _),
  op_JUMPI(_, _, jumpi_cond_var, jumpi_loc, 1, _),
  jumpi_loc > caller_loc,
  self_loc > jumpi_loc,
  depends(jumpi_cond_var, caller_addr).

.decl SuicidalResult(benefit_val:Value, self_loc:number)
.output SuicidalResult
SuicidalResult(benefit_val, self_loc):-
  op_SELFDESTRUCT(_, benefit_addr, self_loc, 1, _),
  !Step1(self_loc, _, _),
  value(benefit_addr, benefit_val).

